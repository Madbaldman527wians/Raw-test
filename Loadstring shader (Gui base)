-- GUI Base
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local GUI = {}

-- ====== Util ======
function GUI.safeNotify(title, text, dur)
    pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = title or "Info",
            Text = text or "",
            Duration = dur or 3
        })
    end)
end

function GUI.makeTween(inst, time, props, style, dir)
    local info = TweenInfo.new(time or 0.25, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out)
    return TweenService:Create(inst, info, props)
end

-- ====== Evitar duplicado ======
for _, gui in ipairs(PlayerGui:GetChildren()) do
    if CollectionService:HasTag(gui, "ShadersGUI_Main") then
        gui:Destroy()
    end
end

-- ====== ScreenGui + Base ======
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ShadersGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui
CollectionService:AddTag(ScreenGui, "ShadersGUI_Main")

-- Botão flutuante
local ToggleBtn = Instance.new("ImageButton")
ToggleBtn.Name = "EnableDisable"
ToggleBtn.BackgroundTransparency = 1
ToggleBtn.BorderSizePixel = 0
ToggleBtn.Size = UDim2.fromOffset(68, 62)
ToggleBtn.Position = UDim2.new(1, -84, 0, 12)
ToggleBtn.Image = "rbxthumb://type=Asset&w=768&h=432&id=89251645769768"
ToggleBtn.Parent = ScreenGui
Instance.new("UICorner", ToggleBtn)

-- Base principal
local Base = Instance.new("Frame")
Base.Name = "Base"
Base.Size = UDim2.fromOffset(468, 346)
Base.Position = UDim2.new(0.5, -234, 0.5, -173)
Base.BackgroundColor3 = Color3.fromRGB(24,24,24)
Base.BorderSizePixel = 0
Base.Active = true
Base.Visible = false
Base.Parent = ScreenGui
Instance.new("UICorner", Base).CornerRadius = UDim.new(0,25)

-- Barra de pesquisa
local SearchHolder = Instance.new("Frame")
SearchHolder.Name = "Search"
SearchHolder.BackgroundColor3 = Color3.fromRGB(49,49,49)
SearchHolder.BorderSizePixel = 0
SearchHolder.Size = UDim2.fromOffset(414, 38)
SearchHolder.Position = UDim2.fromOffset(30, 250)
SearchHolder.Parent = Base
Instance.new("UICorner", SearchHolder).CornerRadius = UDim.new(0,70)

local SearchBox = Instance.new("TextBox")
SearchBox.Name = "SearchBox"
SearchBox.BackgroundTransparency = 1
SearchBox.ClearTextOnFocus = false
SearchBox.TextXAlignment = Enum.TextXAlignment.Left
SearchBox.Size = UDim2.fromOffset(378,44)
SearchBox.Position = UDim2.fromOffset(18,-2)
SearchBox.PlaceholderText = "Search Shaders..."
SearchBox.Text = ""
SearchBox.TextColor3 = Color3.fromRGB(132,132,132)
SearchBox.Font = Enum.Font.SourceSansBold
SearchBox.TextSize = 14
SearchBox.Parent = SearchHolder

-- Lista
local ListHolder = Instance.new("ScrollingFrame")
ListHolder.Name = "List"
ListHolder.BackgroundTransparency = 1
ListHolder.BorderSizePixel = 0
ListHolder.Position = UDim2.fromOffset(10, 68)
ListHolder.Size = UDim2.fromOffset(452,170)
ListHolder.ScrollBarThickness = 6
ListHolder.CanvasSize = UDim2.new(0,0,0,0)
ListHolder.Parent = Base

local UIList = Instance.new("UIListLayout")
UIList.Padding = UDim.new(0,10)
UIList.FillDirection = Enum.FillDirection.Vertical
UIList.HorizontalAlignment = Enum.HorizontalAlignment.Left
UIList.SortOrder = Enum.SortOrder.LayoutOrder
UIList.Parent = ListHolder

-- Arrastar
local DragBar = Instance.new("Frame")
DragBar.Name = "modern draggable"
DragBar.BackgroundColor3 = Color3.fromRGB(118,118,118)
DragBar.BackgroundTransparency = 0.4
DragBar.BorderSizePixel = 0
DragBar.Size = UDim2.fromOffset(276, 8)
DragBar.Position = UDim2.fromOffset(98, 334)
DragBar.Parent = Base
Instance.new("UICorner", DragBar)

do
    local dragging = false
    local dragStart, startPos

    local function update(inputPos)
        local delta = inputPos - dragStart
        Base.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    local function inputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1
        or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = Base.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end

    local function inputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement
            or input.UserInputType == Enum.UserInputType.Touch) then
            update(input.Position)
        end
    end

    DragBar.InputBegan:Connect(inputBegan)
    UserInputService.InputChanged:Connect(inputChanged)
end

-- Abrir/fechar
local isOpen = false
local function openGUI()
    if isOpen then return end
    isOpen = true
    Base.Visible = true
    Base.BackgroundTransparency = 1
    makeTween(Base,0.18,{BackgroundTransparency=0}):Play()
end
local function closeGUI()
    if not isOpen then return end
    isOpen = false
    local t = makeTween(Base,0.16,{BackgroundTransparency=1})
    t:Play()
    t.Completed:Wait()
    Base.Visible = false
end

ToggleBtn.MouseButton1Click:Connect(function()
    if isOpen then closeGUI() else openGUI() end
end)

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Escape and isOpen then
        closeGUI()
    end
end)

-- Abrir na 1ª vez
openGUI()

-- ====== Exportar ======
GUI.Base = Base
GUI.ListHolder = ListHolder
GUI.SearchBox = SearchBox
GUI.UIList = UIList
GUI.safeNotify = GUI.safeNotify
GUI.openGUI = openGUI
GUI.closeGUI = closeGUI

return GUI
